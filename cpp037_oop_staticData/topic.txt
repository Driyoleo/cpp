~ static members and method 

# use 
- helps to fix a common variable for all objects 
- for purpose like counting number of objects within a particular class

# static members
- way to initialization :
    - step 1 : initialize the static variable only iniside the class
        eg.. 
            static int static_var ;
    - step 2 : initialize it's value outside the class
        eg.. 
            int class_name :: static_var ;
    - step 3 : use as you want 
        eg.. 
            static_var++ ;
- eg..
        #include<iostream>
        using namespace std ;

        class student
        {
            private :
                static int count ;
                string first_name ;
                string last_name ;
                int age ;
            public :
                void set_add() ;
                // static void set_display() ;
        };

        int student :: count = 0 ;

        void student :: set_add(){
            cout << "data of student number .. " << count+1 << endl ;
            cout << "enter the first name : " ;
            cin >> first_name ;
            cout << "enter the second name : " ;
            cin >> last_name ;
            count++ ;
        }

        int main(){
            student raj , vikash , shardul ;
            raj.set_add() ;
            vikash.set_add() ;
            shardul.set_add() ;

            return 0 ;
        }

        .. output :
            data of student number .. 1
            enter the first name : raj
            enter the second name : shekhar
            data of student number .. 2
            enter the first name : vikash
            enter the second name : varma
            data of student number .. 3
            enter the first name : shardul
            enter the second name : kumar

- note :
    - static member cannot be initialized with value inside the class

# static methods 
- way of initialization 
    - step 1 : initialize function prototype (optional)
        eg..
            static data_type function_name ;
    - step 2 : define the function later 
        eg..
            static class_name :: function_name(parameters){ // defination of function ; }
    - step 3 : call the function in main have two ways 
        eg..
            1. with object of that class
                object_name.function_name(parameters) ;
            2. with direct class name 
                class_name :: function_name ;
- eg.. 
        #include<iostream>
        using namespace std ;

        class student
        {
            private :
                static int count ;
                string first_name ;
                string last_name ;
                int age ;
            public :
                void set_add() ;
                static void set_display() ;
        };

        int student :: count = 0 ;

        void student :: set_add()
        {
            cout << "data of student number .. " << count+1 << endl ;
            cout << "enter the first name : " ;
            cin >> first_name ;
            cout << "enter the second name : " ;
            cin >> last_name ;
            count++ ;
        }

        void student :: set_display()
        {
            cout << "total numbers students : " << count << endl ;
        }

        int main(){
            student raj , vikash , shardul ;
            raj.set_add() ;
            vikash.set_add() ;
            shardul.set_add() ;
            student :: set_display() ;

            return 0 ;
        }

        eg.. 
            data of student number .. 1
            enter the first name : raj
            enter the second name : shekhar
            data of student number .. 2
            enter the first name : vikash
            enter the second name : varma
            data of student number .. 3
            enter the first name : shardul
            enter the second name : kumar           
            total numbers students : 3


