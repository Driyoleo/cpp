~ string functions 

# types of string functions
- basic functions
- iterator functions
- capacity functions

~ string basic functions 

# length() 
- it tells the length of the string 
- syntax :
    string_variable.length() ;
- eg.. 
    string str = "hello" ;
    cout << str.length() ;

    .. output : 
        5

# swap() 
- it swap the value of two variable of any data type but their data type must be similar
- syntax :
    swap(a,b) ;
- eg.. 
    string str1 = "hello" ;
    string str2 = "world" ;
    cout << str1 << " " << str2 << endl;
    swap(str1 , str2 ) ;
    cout << str1 << " " << str2 ;

    .. output :
        hello world
        world hello

# size()
- it tells the total size of the string 
- syntax :
    string_variable.size() 
- eg.. 
    cout << str1.size() << endl;

    .. output :
        5
- note : size of one char is 1 byte

# resize()
- it resize the string by reducing it number of characters inside it
- syntax :
    string_variable.resize() 
- eg.. 
    cout << str2 << endl ;
    str2.resize(4) ;
    cout << str2 << endl ;

    .. output :
        hello
        hell

# find() 
- it returns the starting index of that sub string in the main string at the first occurence only
- syntax :
    string_variable.find(<sub_string>) ;
- eg.. 
    string sentence = "hello world how are you howard ?" ;
    cout << sentence.find("ho") << endl ;

    .. output :
        12 

# push_back()
- it appends a given character at the last of main string 
- it takes only char as argument , simply mean you can pass only one alphabet into the string through this
- it is a void function
- syntax :
    string_variable.push_back(<passing character>) ;
- eg.. 
    sentence.push_back('c') ;
    cout << sentence << endl;

    .. output :
        hello world how are you howard ?c

# pop_back()
- this functions is used to delete the last character from the string 
- it is a void function
- syntax :
    string_variable.pop_back() ;
- eg.. 
    sentence = "hello" ;
    sentence.pop_back() ;
    cout << sentence << endl ;

    .. output :
        hell

# clear()
- this function is used to clear all the elements in the string 
- syntax :
    string_variable.clear() ;
- eg.. 
    sentence.clear() ;
    cout << sentence << "." << endl ;

    .. output :
        .

# strncmp()
- it a function for array of characters , to compare two string size of two strings 
- it returns 0 if both are equal 
- it returns >0 if arrc1 is greater
- it returns <0 if arrc2 is greater
- syntax :
    string_variable.stncmp(arrc1 , arrc2 , num_byte) ;
    - arrc1 and arrc2 are the two array of characters to be compared 
    - num_byte .. simple to mean the number of characters upto which it will compare 
- eg.. 
    char s1[] = "az" ;
    char s2[] = "ab"  ;
    int result = strncmp(s1 , s2 , 2 ) ;
    cout << result << endl ;

    .. output :
        1

# replace() 
- it is used to repalce a set of characters by another set of characters inside a string
- syntax :
    string_variable.replace( start_index , num_variable , replacing_string ) ;
    - start_index : it means the starting index between which you want to replace
    - num_variable : the number of characters from start_index which you want to replace
    - replacing_string : the string whcih should be inserted in the string as replacement 
eg.. 
    sentence = "i am a good boy" ;
    sentence.replace( 7 , 4 ,  "bad") ;
    cout << sentence << endl ;

    .. output :
        i am a bad boy

# substr()
- This function is used to create a substring from a given string. 
- syntax : 
    string_variable.substr( start , end ) ;
    start : starting point 
    end : the index one less than upto which the substr will be given
- eg.. 
    sentence = "i am a good boy" ;
    cout << sentence.substr(0,1) ;

    .. output :
        i 

# erase()
- it is used to remove certain characters in string
- different syntax have different work
- syntax :
    1. string_variable.erase() ;
    - delete all the characters inisde the string

    2. string_variable.erase(3) ;
    - delete all the characters from index 3

    3. string_variable.erase(7,4) ;
    - delete the elements starting from index 7 upto 4 characters from that

- eg.. 
    sentence = "i am a good boy" ;
    sentence.erase(7,5) ;
    cout << ". " << sentence << " ." << endl ;

    .. output :
        . i am a boy .







