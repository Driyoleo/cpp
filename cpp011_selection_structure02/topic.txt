~ switch selection structure 

# explanation 
- The control statement that allows us to make a decision effectively from the number of choices is called a switch, or a switch
  case-default since these three keywords go together to make up the control statement. 
- Switch executes that block of code, which matches the case value. If the value does not match with any of the cases, then the default
  block is executed. 
- The expression following the switch can be an integer expression or a character expression. Remember, that case labels should be unique
  for each of the cases. If it is the same, it may create a problem while executing a program. At the end of the case labels, we always use a colon ( : ). Each case is associated with a block. A block contains multiple statements that are grouped together for a particular case.
- The break keyword in a case block indicates the end of a particular case. If we do not put the break in each case, then even though the
  specific case is executed, the switch will continue to execute all the cases until the end is reached. The default case is optional.
  Whenever the expression's value is not matched with any of the cases inside the switch, then the default case will be executed.

# syntax 
    switch (variable){ // variable whose value will be checked
        case value1 :
        statement ;
        break ;

        case value2 :
        statement ;
        break ;

        default :
        statement ;
    }

# note 
- if we will not give break then the case which will match will run and the other cases under that will also run till default
- eg. 
    switch (num){
        case 1 :
        cout << " one " << endl ;
        case 2 :
        cout << " two " << endl ;
        default :
        cout << " three " ;
    }
    ...
    output (if num = 1 ) :
     one 
     two
     three
    - here all only case 1 was supposed to run 
    - but due to absence of break statement
    - case 1 then case 2 ... then lasltly default runs
